/*
    This file is part of Tool Provider Manager - Manager of LTI Tool Providers
    for learning platforms.
    Copyright (C) 2022  Francisco José Fernández Jiménez.

    Tool Provider Manager is free software: you can redistribute it and/or
    modify it under the terms of the GNU General Public License as published
    by the Free Software Foundation, either version 3 of the License, or (at
    your option) any later version.

    Tool Provider Manager is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
    Public License for more details.

    You should have received a copy of the GNU General Public License along
    with Tool Provider Manager. If not, see <https://www.gnu.org/licenses/>.
*/

package es.us.dit.lti.config;

import java.io.Serializable;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;

/**
 * Class that stores the properties of a tool that you do not want to
 * store separately in the database.
 *
 * @author Francisco José Fernández Jiménez
 */
public class ToolUiConfig implements Serializable {

	/**
	 * Serializable requirement.
	 */
	private static final long serialVersionUID = 465900926757062130L;

	/**
	 * Name of the file that will contain the instructors' commands.
	 */
	private String commandFilename = null;

	/**
	 * Enables sending text instead of a file.
	 */
	private boolean enableSendText = false;

	/**
	 * Enables a text box for instructors to send commands to the tool.
	 */
	private boolean enableInstructorCommand = false;

	/**
	 * Value of the <code>accept</code> attribute of the input of type file.
	 *
	 * <p>See <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept">
	 * https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept</a>.
	 */
	private String inputFileAccept = null;

	/**
	 * Pattern of the name of the file to deliver.
	 */
	private String inputFilePattern = null;

	/**
	 * Pattern of the name of the file to deliver (for instructors if not null).
	 */
	private String inputInstructorFilePattern = null;

	/**
	 * Maximum size allowed. By default it will be the generic one established
	 * in the application settings.
	 */
	private Integer inputFileSize = null;

	/**
	 * Keep delivered files, do not delete them.
	 */
	private boolean keepFiles = false;

	/**
	 * Keep the output generated by the corrector.
	 */
	private boolean keepOutput = false;

	/**
	 * Form legend text.
	 */
	private String legendForm = null;

	/**
	 * Instructors can manage their own attempts and those of other users.
	 *
	 * <p>Other users with same tool key.
	 */
	private boolean manageAttempts = false;

	/**
	 * Users whose attempts should not be managed by instructors (hidden).
	 */
	private List<String> manageAttemptsExcludeUsers;

	/**
	 * Maximum number of attempts. It is only applied if files are kept
	 * and it is greater than -1.
	 */
	private int maxAttempts = -1;

	/**
	 * Maximum number of users that can use the tool simultaneously.
	 */
	private int maxConcurrentUsers = -1;

	/**
	 * The number of attempts is by file name delivered and not by the total
	 * number of attempts.
	 */
	private boolean maxAttemptsDependsOnFilenames = false;

	/**
	 * If enabled, the score/outcome is not saved and a redirect is made to another
	 * page with the appropriate parameters and arguments.
	 */
	private boolean redirectMode = false;

	/**
	 * Submit button text.
	 */
	private String sendButtonText = null;

	/**
	 * Shows the current user's previously submitted attempts.
	 */
	private boolean showAttempts = false;

	/**
	 * Name of the file that will contain the text written by the user.
	 */
	private String textFilename = null;


	/**
	 * Gets the name of the file that will contain the instructors' commands.
	 *
	 * @return the command filename
	 */
	public String getCommandFilename() {
		return commandFilename;
	}

	/**
	 * Sets the command filename.
	 *
	 * @param commandFilename new value
	 */
	public void setCommandFilename(String commandFilename) {
		this.commandFilename = commandFilename;
	}

	/**
	 * Gets if it is enabled sending text instead of a file.
	 *
	 * @return true if enabled
	 */
	public boolean isEnableSendText() {
		return enableSendText;
	}

	/**
	 * Sets if it is enabled sending text instead of a file.
	 *
	 * @param enableSendText new value
	 */
	public void setEnableSendText(boolean enableSendText) {
		this.enableSendText = enableSendText;
	}

	/**
	 * Gets if it is enabled a text box for instructors to
	 * send commands to the tool.
	 *
	 * @return true if enabled
	 */
	public boolean isEnableInstructorCommand() {
		return enableInstructorCommand;
	}

	/**
	 * Sets if it is enabled a text box for instructors to send commands to the tool.
	 *
	 * @param enableInstructorCommand new value
	 */
	public void setEnableInstructorCommand(boolean enableInstructorCommand) {
		this.enableInstructorCommand = enableInstructorCommand;
	}

	/**
	 * Gets the value of the <code>accept</code> attribute of the input of type file.
	 *
	 * <p>See <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept">
	 * https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept</a>.
	 *
	 * @return the input file accept attribute
	 */
	public String getInputFileAccept() {
		return inputFileAccept;
	}

	/**
	 * Sets the value of the <code>accept</code> attribute of the input of type file.
	 *
	 * @param inputFileAccept new value
	 */
	public void setInputFileAccept(String inputFileAccept) {
		this.inputFileAccept = inputFileAccept;
	}

	/**
	 * Gets the pattern of the name of the file to deliver.
	 *
	 * @return pattern of valid input file
	 */
	public String getInputFilePattern() {
		return inputFilePattern;
	}

	/**
	 * Sets the pattern of the name of the file to deliver.
	 *
	 * @param inputFilePattern new value
	 */
	public void setInputFilePattern(String inputFilePattern) {
		this.inputFilePattern = inputFilePattern;
	}

	/**
	 * Gets the pattern of the name of the file to deliver for instructors.
	 *
	 * <p>If it is null, it is ignored.
	 *
	 * @return the file name pattern
	 */
	public String getInputInstructorFilePattern() {
		return inputInstructorFilePattern;
	}

	/**
	 * Sets the pattern of the name of the file to deliver for instructors.
	 *
	 * @param inputInstructorFilePattern new value or null to ignore
	 */
	public void setInputInstructorFilePattern(String inputInstructorFilePattern) {
		this.inputInstructorFilePattern = inputInstructorFilePattern;
	}

	/**
	 * Gets the maximum file size allowed (kB). By default it will be the generic one established
	 * in the application settings.
	 *
	 * @return the maximum file size allowed
	 */
	public Integer getInputFileSize() {
		return inputFileSize;
	}

	/**
	 * Sets the maximum file size allowed (kB). By default it will be the generic one established
	 * in the application settings.
	 *
	 * @param inputFileSize new value
	 */
	public void setInputFileSize(Integer inputFileSize) {
		this.inputFileSize = inputFileSize;
	}

	/**
	 * Gets if tool keeps delivered files.
	 *
	 * @return true if delivered files are kept
	 */
	public boolean isKeepFiles() {
		return keepFiles;
	}

	/**
	 * Sets if tool keeps delivered files.
	 *
	 * @param keepFiles new value
	 */
	public void setKeepFiles(boolean keepFiles) {
		this.keepFiles = keepFiles;
	}

	/**
	 * Gets if tool keeps the output generated by the corrector.
	 *
	 * @return true if output is kept
	 */
	public boolean isKeepOutput() {
		return keepOutput;
	}

	/**
	 * Sets if tool keeps the output generated by the corrector.
	 *
	 * @param keepOutput new value
	 */
	public void setKeepOutput(boolean keepOutput) {
		this.keepOutput = keepOutput;
	}

	/**
	 * Gets the HTTP form legend text.
	 *
	 * @return text of legend
	 */
	public String getLegendForm() {
		return legendForm;
	}

	/**
	 * Sets the HTTP form legend text.
	 *
	 * @param legendForm new value
	 */
	public void setLegendForm(String legendForm) {
		this.legendForm = legendForm;
	}

	/**
	 * Gets if instructors can manage their own attempts and those of other users.
	 *
	 * <p>Other users with same tool key.
	 *
	 * @return true if instructor can manage files
	 */
	public boolean isManageAttempts() {
		return manageAttempts;
	}

	/**
	 * Sets if instructors can manage their own attempts and those of other users.
	 *
	 * <p>Other users with same tool key.
	 *
	 * @param manageAttempts new value
	 */
	public void setManageAttempts(boolean manageAttempts) {
		this.manageAttempts = manageAttempts;
	}

	/**
	 * Gets list of usernames whose attempts should not be managed by instructors (hidden).
	 *
	 * @return the list of usernames
	 */
	public List<String> getManageAttemptsExcludeUsers() {
		return manageAttemptsExcludeUsers;
	}

	/**
	 * Sets list of usernames whose attempts should not be managed by instructors (hidden).
	 *
	 * @param manageAttemptsExcludeUsers new value
	 */
	public void setManageAttemptsExcludeUsers(List<String> manageAttemptsExcludeUsers) {
		this.manageAttemptsExcludeUsers = manageAttemptsExcludeUsers;
	}

	/**
	 * Gets the maximum number of attempts. It is only applied if files are kept
	 * and it is greater than -1.
	 *
	 * @return the maximum number of attempts
	 */
	public int getMaxAttempts() {
		return maxAttempts;
	}

	/**
	 * Sets the maximum number of attempts. It is only applied if files are kept
	 * and it is greater than -1.
	 *
	 * @param maxAttempts new value or -1 to ignore
	 */
	public void setMaxAttempts(int maxAttempts) {
		this.maxAttempts = maxAttempts;
	}

	/**
	 * Gets the maximum number of users that can use the tool simultaneously.
	 *
	 * <p>Can not be greater than the global value.
	 *
	 * @return the maximun number of concurrent users
	 */
	public int getMaxConcurrentUsers() {
		return maxConcurrentUsers;
	}

	/**
	 * Sets the maximum number of users that can use the tool simultaneously.
	 *
	 * <p>Can not be greater than the global value.
	 *
	 * @param maxConcurrentUsers new value
	 */
	public void setMaxConcurrentUsers(int maxConcurrentUsers) {
		this.maxConcurrentUsers = maxConcurrentUsers;
	}

	/**
	 * Gets if the number of attempts is by file name delivered and not by the total
	 * number of attempts.
	 *
	 * @return if number of attempts is by file name
	 */
	public boolean isMaxAttemptsDependsOnFilenames() {
		return maxAttemptsDependsOnFilenames;
	}

	/**
	 * Sets if the number of attempts is by file name delivered and not by the total
	 * number of attempts.
	 *
	 * @param maxAttemptsDependsOnFilenames new value
	 */
	public void setMaxAttemptsDependsOnFilenames(boolean maxAttemptsDependsOnFilenames) {
		this.maxAttemptsDependsOnFilenames = maxAttemptsDependsOnFilenames;
	}

	/**
	 * Gets if this tool works in redirect mode. If enabled, the score/outcome is not saved
	 * and a redirect is made to another
	 * page with the appropriate parameters and arguments.
	 * 	 *
	 * @return true if redirect mode is enabled
	 */
	public boolean isRedirectMode() {
		return redirectMode;
	}

	/**
	 * Sets if this tool works in redirect mode.
	 *
	 * @param redirectMode new value
	 */
	public void setRedirectMode(boolean redirectMode) {
		this.redirectMode = redirectMode;
	}

	/**
	 * Gets the submit button text.
	 *
	 * @return the text
	 */
	public String getSendButtonText() {
		return sendButtonText;
	}

	/**
	 * Sets the submit button text.
	 *
	 * @param sendButtonText new value
	 */
	public void setSendButtonText(String sendButtonText) {
		this.sendButtonText = sendButtonText;
	}

	/**
	 * Gets if the tool shows the current user's previously submitted attempts.
	 *
	 * @return true if it is enabled
	 */
	public boolean isShowAttempts() {
		return showAttempts;
	}

	/**
	 * Sets if the tool shows the current user's previously submitted attempts.
	 *
	 * @param showAttempts new value
	 */
	public void setShowAttempts(boolean showAttempts) {
		this.showAttempts = showAttempts;
	}

	/**
	 * Gets the name of the file that will contain the text written by the user.
	 *
	 * @return the text file name
	 */
	public String getTextFilename() {
		return textFilename;
	}

	/**
	 * Sets the name of the file that will contain the text written by the user.
	 *
	 * @param textFilename new value
	 */
	public void setTextFilename(String textFilename) {
		this.textFilename = textFilename;
	}


	/**
	 * Convert this object to a JSON string.
	 *
	 * @return JSON string
	 */
	@Override
	public String toString() {
		Gson gson = new GsonBuilder().setPrettyPrinting().serializeNulls().create();
		return gson.toJson(this);
	}

	/**
	 * Deserialize from JSON string.
	 *
	 * @param json JSON string
	 * @return new object
	 */
	public static ToolUiConfig fromString(String json) {
		ToolUiConfig t = null;
		try {
			t = new Gson().fromJson(json, ToolUiConfig.class);
		} catch (JsonSyntaxException e) {
			//ignore, t is null
			t = null;
		}
		return t;
	}
}
