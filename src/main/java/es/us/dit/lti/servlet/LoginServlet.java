/*
    This file is part of Tool Provider Manager - Manager of LTI Tool Providers
    for learning platforms.
    Copyright (C) 2022  Francisco José Fernández Jiménez.

    Tool Provider Manager is free software: you can redistribute it and/or
    modify it under the terms of the GNU General Public License as published
    by the Free Software Foundation, either version 3 of the License, or (at
    your option) any later version.

    Tool Provider Manager is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
    Public License for more details.

    You should have received a copy of the GNU General Public License along
    with Tool Provider Manager. If not, see <https://www.gnu.org/licenses/>.
*/

package es.us.dit.lti.servlet;

import java.io.IOException;
import java.util.Locale;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import es.us.dit.lti.MessageMap;
import es.us.dit.lti.SecurityUtil;
import es.us.dit.lti.entity.MgmtUser;
import es.us.dit.lti.persistence.MgmtUserDao;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

/**
 * Servlet implementation class to allow management users to login.
 *
 * @author Francisco José Fernández Jiménez
 */
@WebServlet("/do/login")
public class LoginServlet extends HttpServlet {
	/**
	 * Serializable requirement.
	 */
	private static final long serialVersionUID = 1L;
	/**
	 * Logger.
	 */
	private static final Logger logger = LoggerFactory.getLogger(LoginServlet.class);

	/**
	 * Processes login.
	 *
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		if (request.getParameter("user") != null && request.getParameter("pass") != null) {
			final MgmtUser user = new MgmtUser();
			user.setUsername(request.getParameter("user"));
			user.setPassword(request.getParameter("pass"));
			if (MgmtUserDao.login(user)) {
				final Locale locale = request.getLocale();
				final HttpSession session = request.getSession();
				session.setAttribute("text", new MessageMap(locale));
				session.setAttribute("mgmtUser", user);
				try {
					session.setAttribute("launchId", SecurityUtil.getRandomId());
				} catch (final Exception e) {
					e.printStackTrace();
				}
				forward(request, response, "../user/tools.jsp");
			} else {
				logger.error("Authentication ERROR: USER={} FROM={}", user.getUsername(), request.getRemoteAddr());
				response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
				include(request, response, "../errorlogin.html");
			}
		} else {
			response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
			include(request, response, "../errorlogin.html");
		}

	}

	/**
	 * Forwards a request to an URL.
	 *
	 * @param request  the HTTP request
	 * @param response the HTTP response
	 * @param path     the URL
	 */
	private void forward(HttpServletRequest request, HttpServletResponse response, String path) {
		try {
			request.getRequestDispatcher(path).forward(request, response);
		} catch (ServletException | IOException e) {
			logger.error("Error forwarding", e);
		}
	}

	/**
	 * Includes the content generated by other servlet.
	 *
	 * @param request  the HTTP request
	 * @param response the HTTP response
	 * @param path     the URL
	 */
	private void include(HttpServletRequest request, HttpServletResponse response, String path) {
		try {
			request.getRequestDispatcher(path).include(request, response);
		} catch (ServletException | IOException e) {
			logger.error("Error including", e);
		}
	}

}
